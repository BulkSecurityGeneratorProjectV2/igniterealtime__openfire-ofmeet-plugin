<!--
  ~ Copyright (C) 2018 Ignite Realtime Foundation. All rights reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">   <id>ofmeet-plugin-assembly</id>
    <formats>
        <format>jar</format>
    </formats>
    <includeBaseDirectory>false</includeBaseDirectory>

    <!--
        The OFMeet plugin is an aggregation of various Jitsi projects. These projects have some conflicting dependencies.
        The OFMeet plugin handles these by using a class loading mechanism that loads dependencies for each Jitsi project
        from a different 'lib' folder (as opposed to a plugin that contains all dependencies in one 'lib' folder). This
        assembly descriptor creates these different 'lib' folders. Note that moduleSets are used to capture each of the
        Jitsi projects, and explicitly not dependencySets. Using dependencySets instead of moduleSets introduces a problem,
        as dependencySets use only the dependencies that have been de-duplicated and filtered for conflict by the Maven
        dependency management mechanism. This causes conflicting dependencies to not be included (which typically is a
        good thing, but is the exact opposite of what we're trying to do with this very specific plugin). -->
    <moduleSets>
        <moduleSet>
            <useAllReactorProjects>true</useAllReactorProjects>
            <includes>
                <include>org.igniterealtime.openfire.ofmeet:videobridge</include>
            </includes>
            <binaries>
                <unpack>false</unpack>
                <outputDirectory>lib-videobridge</outputDirectory>
            </binaries>
        </moduleSet>

        <moduleSet>
            <useAllReactorProjects>true</useAllReactorProjects>
            <includes>
                <include>org.igniterealtime.openfire.ofmeet:offocus</include>
            </includes>
            <binaries>
                <unpack>false</unpack>
                <outputDirectory>lib-jicofo</outputDirectory>
            </binaries>
        </moduleSet>

        <moduleSet>
            <useAllReactorProjects>true</useAllReactorProjects>
            <includes>
                <include>org.igniterealtime.openfire.ofmeet:ofgasi</include>
            </includes>
            <binaries>
                <unpack>false</unpack>
                <outputDirectory>lib-jigasi</outputDirectory>
            </binaries>
        </moduleSet>
    </moduleSets>

    <fileSets>

        <!-- metadata files (readme, icons, etc). -->
        <fileSet>
            <outputDirectory/>
            <directory>${project.build.sourceDirectory}/../..</directory>
            <includes>
                <include>*.gif</include>
                <include>*.png</include>
                <include>lib/**</include>
            </includes>
        </fileSet>

        <!-- filtered metadata files (html, plugin.xml) -->
        <fileSet>
            <outputDirectory/>
            <directory>${project.build.sourceDirectory}/../..</directory>
            <filtered>true</filtered>
            <includes>
                <include>*.html</include>
                <include>plugin.xml</include>
            </includes>
        </fileSet>

        <!-- database, i18n and web directory -->
        <fileSet>
            <outputDirectory/>
            <directory>${project.build.sourceDirectory}/..</directory>
            <includes>
                <include>database/**</include>
                <include>i18n/**</include>
                <include>web/**</include>
            </includes>
            <!-- Exclude jsp pages (they will be compiled) and filterable resources -->
            <excludes>
                <exclude>**/*.jsp</exclude>
                <exclude>i18n/**/*.properties</exclude>
                <exclude>web/**/*.xml</exclude>
                <exclude>web/**/*.html</exclude>
                <exclude>web/**/*.properties</exclude>
            </excludes>
        </fileSet>

        <!-- database, i18n and web directory (filtered) -->
        <fileSet>
            <outputDirectory/>
            <directory>${project.build.sourceDirectory}/..</directory>
            <filtered>true</filtered>
            <includes>
                <include>i18n/**/*.properties</include>
                <include>web/**/*.xml</include>
                <include>web/**/*.html</include>
                <include>web/**/*.properties</include>
            </includes>
            <excludes>
                <!-- Exclude the web.xml, it will be generated by JspC -->
                <exclude>web/WEB-INF/web.xml</exclude>
            </excludes>
        </fileSet>

        <!-- web.xml (it will be modified by JspC) -->
        <fileSet>
            <outputDirectory>web/WEB-INF</outputDirectory>
            <directory>${project.build.directory}</directory>
            <includes>
                <include>web.xml</include>
            </includes>
        </fileSet>

        <!-- Include the classes folder (filtered) -->
        <fileSet>
            <outputDirectory>classes</outputDirectory>
            <directory>classes</directory>
            <filtered>true</filtered>
            <includes>
                <include>**/*.xml</include>
                <include>**/*.properties</include>
            </includes>
        </fileSet>

        <!-- Include the classes folder -->
        <fileSet>
            <outputDirectory>classes</outputDirectory>
            <directory>classes</directory>
            <filtered>false</filtered>
            <excludes>
                <exclude>**/*.xml</exclude>
                <exclude>**/*.properties</exclude>
            </excludes>
        </fileSet>
    </fileSets>

    <!-- Bundle the dependencies of this plugin -->
    <dependencySets>
        <dependencySet>
            <outputDirectory>lib</outputDirectory>
            <useProjectArtifact>true</useProjectArtifact>
            <!-- Exclude the modules (and their transitive dependencies) that go in separate 'lib' folders. -->
            <excludes>
                <exclude>org.igniterealtime.openfire.ofmeet:videobridge</exclude>
                <exclude>org.igniterealtime.openfire.ofmeet:offocus</exclude>
                <exclude>org.igniterealtime.openfire.ofmeet:ofgasi</exclude>
            </excludes>
            <useTransitiveDependencies>true</useTransitiveDependencies>
            <useTransitiveFiltering>true</useTransitiveFiltering>
        </dependencySet>
    </dependencySets>
</assembly>
